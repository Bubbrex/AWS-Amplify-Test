
type Todo {
  id: ID!
  name: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User {
  id: ID!
  username: String!
  email: AWSEmail!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Item {
  orderId: ID!
  status: Status!
  customerID: ID!
  amount: Int!
  createdAt: AWSDateTime!
  name: String!
  updatedAt: AWSDateTime!
}

enum Status {
  DELIVERED
  IN_TRANSIT
  PENDING
  UNKNOWN
}

type SearchableTodoConnection {
  items: [Todo]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableAggregateResult {
  name: String!
  result: SearchableAggregateGenericResult
}

type SearchableAggregateScalarResult {
  value: Float!
}

type SearchableAggregateBucketResult {
  buckets: [SearchableAggregateBucketResultItem]
}

type SearchableAggregateBucketResultItem {
  key: String!
  doc_count: Int!
}

union SearchableAggregateGenericResult = SearchableAggregateScalarResult | SearchableAggregateBucketResult

type Query {
  searchTodos(filter: SearchableTodoFilterInput, sort: [SearchableTodoSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableTodoAggregationInput]): SearchableTodoConnection
  searchUsers(filter: SearchableUserFilterInput, sort: [SearchableUserSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableUserAggregationInput]): SearchableUserConnection
  searchItems(filter: SearchableItemFilterInput, sort: [SearchableItemSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableItemAggregationInput]): SearchableItemConnection
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getItem(orderId: ID!, amount: Int!): Item
  listItems(orderId: ID, amount: ModelIntKeyConditionInput, filter: ModelItemFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelItemConnection
}

type SearchableUserConnection {
  items: [User]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableItemConnection {
  items: [Item]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]!
  nextToken: String
}

input ModelTodoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

input ModelTodoConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
}

input DeleteTodoInput {
  id: ID!
}

type Mutation {
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createItem(input: CreateItemInput!, condition: ModelItemConditionInput): Item
  updateItem(input: UpdateItemInput!, condition: ModelItemConditionInput): Item
  deleteItem(input: DeleteItemInput!, condition: ModelItemConditionInput): Item
}

type Subscription {
  onCreateTodo: Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo: Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo: Todo @aws_subscribe(mutations: ["deleteTodo"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateItem: Item @aws_subscribe(mutations: ["createItem"])
  onUpdateItem: Item @aws_subscribe(mutations: ["updateItem"])
  onDeleteItem: Item @aws_subscribe(mutations: ["deleteItem"])
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  username: ModelStringInput
  email: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  username: String!
  email: AWSEmail!
  createdAt: AWSDateTime
}

input UpdateUserInput {
  id: ID!
  username: String
  email: AWSEmail
  createdAt: AWSDateTime
}

input DeleteUserInput {
  id: ID!
}

type ModelItemConnection {
  items: [Item]!
  nextToken: String
}

input ModelStatusInput {
  eq: Status
  ne: Status
}

input ModelItemFilterInput {
  orderId: ModelIDInput
  status: ModelStatusInput
  customerID: ModelIDInput
  amount: ModelIntInput
  createdAt: ModelStringInput
  name: ModelStringInput
  and: [ModelItemFilterInput]
  or: [ModelItemFilterInput]
  not: ModelItemFilterInput
}

input ModelItemConditionInput {
  status: ModelStatusInput
  customerID: ModelIDInput
  createdAt: ModelStringInput
  name: ModelStringInput
  and: [ModelItemConditionInput]
  or: [ModelItemConditionInput]
  not: ModelItemConditionInput
}

input CreateItemInput {
  orderId: ID!
  status: Status!
  customerID: ID!
  amount: Int!
  createdAt: AWSDateTime
  name: String!
}

input UpdateItemInput {
  orderId: ID!
  status: Status
  customerID: ID
  amount: Int!
  createdAt: AWSDateTime
  name: String
}

input DeleteItemInput {
  orderId: ID!
  amount: Int!
}

input ModelIntKeyConditionInput {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelItemByCustomerByStatusByCreatedAtCompositeKeyConditionInput {
  eq: ModelItemByCustomerByStatusByCreatedAtCompositeKeyInput
  le: ModelItemByCustomerByStatusByCreatedAtCompositeKeyInput
  lt: ModelItemByCustomerByStatusByCreatedAtCompositeKeyInput
  ge: ModelItemByCustomerByStatusByCreatedAtCompositeKeyInput
  gt: ModelItemByCustomerByStatusByCreatedAtCompositeKeyInput
  between: [ModelItemByCustomerByStatusByCreatedAtCompositeKeyInput]
  beginsWith: ModelItemByCustomerByStatusByCreatedAtCompositeKeyInput
}

input ModelItemByCustomerByStatusByCreatedAtCompositeKeyInput {
  status: Status
  createdAt: String
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
  range: [String]
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
  range: [ID]
}

input SearchableTodoFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  description: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableTodoFilterInput]
  or: [SearchableTodoFilterInput]
  not: SearchableTodoFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableTodoSortableFields {
  id
  name
  description
  createdAt
  updatedAt
}

input SearchableTodoSortInput {
  field: SearchableTodoSortableFields
  direction: SearchableSortDirection
}

enum SearchableAggregateType {
  terms
  avg
  min
  max
  sum
}

enum SearchableTodoAggregateField {
  id
  name
  description
  createdAt
  updatedAt
}

input SearchableTodoAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableTodoAggregateField!
}

input SearchableUserFilterInput {
  id: SearchableIDFilterInput
  username: SearchableStringFilterInput
  email: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableUserFilterInput]
  or: [SearchableUserFilterInput]
  not: SearchableUserFilterInput
}

enum SearchableUserSortableFields {
  id
  username
  email
  createdAt
  updatedAt
}

input SearchableUserSortInput {
  field: SearchableUserSortableFields
  direction: SearchableSortDirection
}

enum SearchableUserAggregateField {
  id
  username
  email
  createdAt
  updatedAt
}

input SearchableUserAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableUserAggregateField!
}

input SearchableItemFilterInput {
  orderId: SearchableIDFilterInput
  customerID: SearchableIDFilterInput
  amount: SearchableIntFilterInput
  createdAt: SearchableStringFilterInput
  name: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  status: SearchableStringFilterInput
  and: [SearchableItemFilterInput]
  or: [SearchableItemFilterInput]
  not: SearchableItemFilterInput
}

enum SearchableItemSortableFields {
  orderId
  customerID
  amount
  createdAt
  name
  updatedAt
}

input SearchableItemSortInput {
  field: SearchableItemSortableFields
  direction: SearchableSortDirection
}

enum SearchableItemAggregateField {
  orderId
  status
  customerID
  amount
  createdAt
  name
  updatedAt
}

input SearchableItemAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableItemAggregateField!
}

